name: Build and Release

on:
  push:
    branches:
      - master
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8']  # Specify your Python version
        include:
          - os: windows-latest
            executable_extension: .exe
          - os: ubuntu-latest
            executable_extension: ''
          - os: macos-latest
            executable_extension: ''

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install PyInstaller
      run: pip install pyinstaller

    - name: Build Executable
      run: pyinstaller --onefile adr/adr.py

    - name: Determine Executable Name
      run: echo "EXECUTABLE_NAME=adr${{ matrix.executable_extension }}" >> $GITHUB_ENV

    - name: Create Release (only on ubuntu-latest)
      if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-latest'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./dist/${{ env.EXECUTABLE_NAME }}
        asset_name: ${{ env.EXECUTABLE_NAME }}
        asset_content_type: application/octet-stream

